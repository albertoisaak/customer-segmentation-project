"""
Configuration module for customer segmentation application.

This module contains configuration settings, constants, and utility functions
for the customer segmentation application.
"""

import os
from typing import Dict, List, Any


class Config:
    """
    Configuration class for the customer segmentation application.
    
    This class contains all configuration settings, constants, and default values
    used throughout the application.
    """
    
    # Application settings
    APP_TITLE = "An√°lisis de Segmentaci√≥n de Clientes"
    APP_ICON = "üéØ"
    PAGE_LAYOUT = "wide"
    
    # Data processing settings
    MIN_ROWS = 10
    MAX_VARIABLES = 15
    
    # ML algorithm settings
    ML_ALGORITHMS = ["K-Means", "Agglomerative", "DBSCAN"]
    DEFAULT_CLUSTERS = 5
    DEFAULT_RANDOM_STATE = 42
    MIN_CLUSTERS = 2
    MAX_CLUSTERS = 10
    
    # Gen AI settings
    AI_MODELS = ["gpt-3.5-turbo", "gpt-4"]
    DEFAULT_TEMPERATURE = 0.7
    MIN_TEMPERATURE = 0.0
    MAX_TEMPERATURE = 2.0
    
    # Variable selection keywords
    EXCLUDE_KEYWORDS = [
        'date', 'fecha', 'time', 'hora', 'timestamp', 'id', 'user_id',
        'customer_id', 'client_id', 'name', 'nombre', 'email', 'phone',
        'telefono', 'address', 'direccion', 'city', 'ciudad', 'state',
        'estado', 'country', 'pais', 'zip', 'postal', 'code', 'codigo'
    ]
    
    DEMOGRAPHIC_KEYWORDS = ['age', 'edad', 'gender', 'genero', 'income', 'ingreso']
    TRANSACTION_KEYWORDS = ['transaction', 'transaccion', 'purchase', 'compra', 'ticket', 'ticket']
    TEMPORAL_KEYWORDS = ['day', 'dia', 'month', 'mes', 'year', 'a√±o', 'frequency', 'frecuencia']
    AMOUNT_KEYWORDS = ['amount', 'monto', 'total', 'sum', 'suma', 'avg', 'promedio', 'average']
    
    # Visualization settings
    PLOT_COLORS = {
        'ml': 'viridis',
        'ai': 'plasma'
    }
    
    # Report settings
    REPORT_SECTIONS = [
        "Informaci√≥n General",
        "M√©tricas de Calidad",
        "Distribuci√≥n de Clusters",
        "Conclusi√≥n",
        "Recomendaciones"
    ]
    
    # Business questions
    BUSINESS_QUESTIONS = [
        "¬øCu√°ntos segmentos distintos de clientes existen?",
        "¬øCu√°les son las caracter√≠sticas clave de cada segmento?",
        "¬øQu√© comportamientos espec√≠ficos tiene cada segmento?",
        "¬øQu√© estrategias de retenci√≥n son m√°s efectivas por segmento?",
        "¬øQu√© oportunidades de crecimiento identificas por segmento?",
        "¬øQu√© m√©tricas de seguimiento recomiendas por segmento?"
    ]


class Utils:
    """
    Utility functions for the customer segmentation application.
    """
    
    @staticmethod
    def format_number(number: int) -> str:
        """
        Format number with thousands separator.
        
        Args:
            number: Number to format
            
        Returns:
            str: Formatted number string
        """
        return f"{number:,}"
    
    @staticmethod
    def format_percentage(value: float, decimals: int = 1) -> str:
        """
        Format percentage value.
        
        Args:
            value: Percentage value (0-100)
            decimals: Number of decimal places
            
        Returns:
            str: Formatted percentage string
        """
        return f"{value:.{decimals}f}%"
    
    @staticmethod
    def get_quality_label(score: float, metric_type: str) -> str:
        """
        Get quality label based on metric score.
        
        Args:
            score: Metric score
            metric_type: Type of metric ('silhouette', 'calinski', 'davies')
            
        Returns:
            str: Quality label
        """
        if metric_type == 'silhouette':
            if score > 0.5:
                return 'Excelente'
            elif score > 0.3:
                return 'Buena'
            else:
                return 'Aceptable'
        elif metric_type == 'calinski':
            if score > 200:
                return 'Excelente separaci√≥n'
            elif score > 100:
                return 'Buena separaci√≥n'
            else:
                return 'Separaci√≥n aceptable'
        elif metric_type == 'davies':
            if score < 0.5:
                return 'Excelente'
            elif score < 1.0:
                return 'Buena'
            else:
                return 'Aceptable'
        else:
            return 'N/A'
    
    @staticmethod
    def validate_api_key(api_key: str) -> bool:
        """
        Validate OpenAI API key format.
        
        Args:
            api_key: API key to validate
            
        Returns:
            bool: True if valid format
        """
        if not api_key:
            return False
        
        # Basic format validation
        if not api_key.startswith('sk-'):
            return False
        
        if len(api_key) < 20:
            return False
        
        return True
    
    @staticmethod
    def get_timestamp() -> str:
        """
        Get current timestamp in formatted string.
        
        Returns:
            str: Formatted timestamp
        """
        from datetime import datetime
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S")


class ErrorMessages:
    """
    Centralized error messages for the application.
    """
    
    # Data loading errors
    NO_DATA_LOADED = "‚ùå No hay datos cargados"
    EMPTY_DATASET = "‚ùå Dataset vac√≠o"
    SMALL_DATASET = "‚ùå Dataset muy peque√±o (m√≠nimo 10 filas)"
    UNSUPPORTED_FORMAT = "‚ùå Formato de datos no soportado"
    
    # Preprocessing errors
    NO_NUMERIC_VARIABLES = "‚ùå No se encontraron variables num√©ricas v√°lidas"
    PREPROCESSING_ERROR = "‚ùå Error en preprocesamiento"
    
    # ML errors
    ML_NOT_PREPROCESSED = "‚ùå Datos no preprocesados"
    UNSUPPORTED_ALGORITHM = "‚ùå M√©todo no soportado"
    DBSCAN_NO_CLUSTERS = "‚ùå DBSCAN no encontr√≥ clusters v√°lidos"
    
    # AI errors
    AI_NOT_PREPROCESSED = "‚ùå Datos no preprocesados"
    INVALID_API_KEY = "‚ùå API key inv√°lida"
    AI_API_ERROR = "‚ùå Error en Gen AI"
    
    # General errors
    UNKNOWN_ERROR = "‚ùå Error desconocido"
    COMPARISON_ERROR = "‚ùå Error en an√°lisis comparativo"


class SuccessMessages:
    """
    Centralized success messages for the application.
    """
    
    # Data loading success
    DATA_LOADED = "‚úÖ Datos cargados exitosamente"
    DATA_PREPROCESSED = "‚úÖ Datos preprocesados"
    
    # Analysis success
    ML_COMPLETED = "‚úÖ An√°lisis ML tradicional completado"
    AI_COMPLETED = "‚úÖ An√°lisis Gen AI completado"
    COMPARISON_COMPLETED = "‚úÖ An√°lisis comparativo completado"
    
    # Report success
    REPORT_GENERATED = "‚úÖ Reporte generado exitosamente"
    REPORT_DOWNLOADED = "‚úÖ Reporte descargado exitosamente"
